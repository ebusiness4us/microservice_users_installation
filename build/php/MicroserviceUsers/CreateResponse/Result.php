<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: user.proto

namespace MicroserviceUsers\CreateResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>microserviceUsers.CreateResponse.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>CREATED = 0;</code>
     */
    const CREATED = 0;
    /**
     * Generated from protobuf enum <code>INVALID_EMAIL = 1;</code>
     */
    const INVALID_EMAIL = 1;
    /**
     * Generated from protobuf enum <code>INVALID_PASSWORD_REQUIREMENTS = 2;</code>
     */
    const INVALID_PASSWORD_REQUIREMENTS = 2;
    /**
     * Generated from protobuf enum <code>INVALID_LOCALE = 3;</code>
     */
    const INVALID_LOCALE = 3;
    /**
     * Generated from protobuf enum <code>EMAIL_ALREADY_EXISTS = 4;</code>
     */
    const EMAIL_ALREADY_EXISTS = 4;

    private static $valueToName = [
        self::CREATED => 'CREATED',
        self::INVALID_EMAIL => 'INVALID_EMAIL',
        self::INVALID_PASSWORD_REQUIREMENTS => 'INVALID_PASSWORD_REQUIREMENTS',
        self::INVALID_LOCALE => 'INVALID_LOCALE',
        self::EMAIL_ALREADY_EXISTS => 'EMAIL_ALREADY_EXISTS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \MicroserviceUsers\CreateResponse_Result::class);

